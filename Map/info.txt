1: Map (interface)
1.1: HashMap (class)  implements  Map (interface)
1.1.1: LinkedHashMap (class) extends HashMap (class) 

1.2: WeakHashMap (class) implements  Map (interface)

1.3: IdentityHashMap (class) implements  Map (interface)

1.4: Hashtable (class) implements  Map (interface)
1.41.1: Properties (class) extends Hashtable (class)

1.5: SortedMap (interface) extends  Map (interface)
1.5.1: NavigableMap (interface) extends SortedMap (interface)
1.5.1.1: TreeMap (class) implements NavigableMap (interface)

---------------
Map Interface
https://docs.oracle.com/javase/8/docs/api/java/util/Map.html
---------------
	- Map is not child interface of Collection Interface
	- wheneverwe want to store group of key-value pair, we use map
	- key and value both must be objects
	- values can repeate but not keys
	- All map implementation classes should provide two "standard" constructors
		- a void (no arguments) constructor which creates an empty map
		- a constrcutor with a single argument of type Map, which creates a new map
			with the same key-value mappings as its argument

	----------
	Map.Entry
	------------
		- A map entry (key-value pair)
		- Inner interface of Entry
		------------------
		Methods of Entry
		----------------
			public Object getKey(): is used to obtain key
			public Object getValue(): is used to obtain value

	---------------
	usefull methods of Map
	--------------------
		public Object put(Object key, Object value)
			- it is used to insert an entry in this map
		publi void putAll(Map map)
			- it is used to insert the specified map in this map
		public Object remove(Object key)
			- its used to delete an entry for the specified key
		public Object get(Object key)
			- its used to return the value for the specified key
		public boolean containsKey(Object key)
			- its used to search the specified key from this map
		public Set keySet()
			- its return the Set view containing all the keys
		public Set entrySet()
			- its returns the Set view containing all the keys and values

------------
HashMap
https://docs.oracle.com/javase/8/docs/api/java/util/HashMap.html
------------
	- A HashMap contains values based on the key
	- Hash table data structure is used
	- Its contains only unique elements
	- It may have one null key and multiple null values
		- Next attempt to enter null as key, it simply discard, without any error

	------------------
	methods of HashMap
	--------------------
	public int size()
		- returns the number of key-value mappings in this map
	public boolean isEmpty()
		- returns true if this map contains no key-value mappings
	public V get(Object key)
		- returns the value to which the specified key is mapped, or null if this map contains
			no mapping for the key


-------------
LinkedHashMap
https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html
--------------
	- subclass of HashMap
	- insertion order is maintained
	- slower insertion and deletion
	- Hybrid Data structure is used: Doubly Linkedlist and Hash table






-------------
Hashtable
https://docs.oracle.com/javase/8/docs/api/java/util/Hashtable.html
-------------
	- this is thread safe version of HashMap
	- unsorted and unordered
	- hash table data structue is used
	- hash table doesn't allow null value unlike HashMap


------------------
SortedMap
https://docs.oracle.com/javase/8/docs/api/java/util/TreeMap.html
--------------------
	- child interface of Map
	- whenever group of key-value pairs needs to be sorted in some sorted order, we use 
		SortedMap
	- sorting logic applies on keys

------------
NavigableMap
https://docs.oracle.com/javase/7/docs/api/java/util/NavigableMap.html
-----------------
	- its a child interface of SortedMap
	- several utility methods it provides to navigate in SortedMap

-----------------
TreeMap
https://docs.oracle.com/javase/8/docs/api/java/util/TreeMap.html
-------------
	- it implements NavigableMap ( so SortedMap and Map)
	- sorted order is maintained
	- its not thread safe
	- the map is sorted according to the natural ordering of its key, or by a Comparator 
		provided at map creation time, depending on which constructor is used
	- A red-black tree based NavigableMap implementation