c++ => new and delete keyword 

----
Java Garbage Collection
-----------------------
	- Destruction of object from memory is done automatically by the JVM
	- No delete keyword in java
	- When there is no reference to an object, then that object is assumed to be no longer needed
		and the memory occupied by the object are released
	- This technique is called Garbage Collection
	- This is accomplished by the JVM

JVM Thread
-------------
	- Whenever we run a java program, JVM creates three threads
		- main thread
		- Thread Scheduler
		- Garbage Collector Thread

	- In these three threads, main thread is a user thread and remaining tow are daemon threads
		which run in background

	- The task of main thread is to execute the main() method
	- The task of thread scheduler is to schedule the threads
	- The task of garbage collector thread is to sweep out abandoned objects from the heap
		memory

	- Abandoned objects or dead objects are those objects which does not have live references

	-----
	finalize method
	---------------
	-  Garbage collector thread before sweeping out an Abandoned object, it calls finalize()
		method of that object
	- After finalize() method is executed, object is destroyed from the memory

------------
cannot force for gc (type of request)
------------------
	- We can call garbage collector explicitly using System.gc() or RunTime.getRunTime().gc()
	- But, it is just a request to garbage collector not a command
	- Its upto garbage collector to honor this request

--
Advantage
---------------
	Increase memory efficiency and decreases the chances for memory leak



Garbage Collection
------------------
	- Removing unwanted objects or abandoned objects from the memory is 
		called garbage collection(GC)
	- In the languages like C++, GC is performed manually using destructors.

	- There is no destructor in java
	- Thete exist better mechanism to handle the garbage collection
	- JVM implicitly sweeps out abondoned objects from the memory
	- Garbage collector thread, before sweeping out an abandoned object, it calls finalize()
		method of that object.



Object's Memory
-----------------
	- An object is created in the memory using new operator. Constructor is used to initialize 
		the properties of that object
	- When an object is no more required, it must be removed from the memory so that, that memory
		can be reused for other object

	- finalize() methd is protected and non-static method of java.lang.Object class.

------------
finalize()
-----------------

	protected void finalize() throws Throwable{
		// code here
	}

	- We can call finalize() method explicitly on an object before it is abandoned.
	- When we cal, only operations kept in finalize() method are performed on an object
	- Object will not be destroyed from the memory
	- That means clean up operations which you have kept in the finalize() method are 
		executed before an object is destroyed from the memory.
	- Garbage collector thread call finalize() method only once for one object
	- Exception occured in finalize() method are not propogated. They are ignored by the GC
	- finalize() methods are not chained like constructors, i.e. there is no calling statement
		to super class finalize() method inside the finalize() method of subclass.
		we need to explicitly call super class finalize() method.
	- we can make finalize() method to be executed forcefully using
		- Runtime.getRunTime().runFinalization()
		- Runtime.runFinalizersOnExit(true)
	- But, both the methods have disadvantages
		- Runtime.getRunTime().runFinalization() makes the just best effort to execute 	
			finalize() method. It is not guaranteed that it will execute finalize() method
		- Runtime.runFinalizersOnExit(true) is deprecated in JDK because some times it runs 
			finalize() method on live objects also.
			

	# NOTE: Object class is super class of our Parent class
