Collection vs Collections
------------------------
	- Collection is a interface
	- Collections is a class
		- Collections class provides sevral utility methods like sort()

Methods of Collection (interface)
-------------------------
	boolean add(Object o);
	- Add an object to the collection

	boolean addAll(Collection c);
	- Add all the objects of specified collection

	boolean remove(Object o);
	- Removes a single instance of the specified element from this collection

	boolean removedAll(Collection c);
	- Removes all of this collection's elements that are also contained in the specified 
		collection

	boolean retainAll(Collection c);
	- Retains only the elements in this collection that are contained in the specified collection

	int size()
	- Return the number of elements in this collection

	boolean contains (Object o)
	- Returns true if this collection contains the specified object

	void clear();
	- Removes all of the elements from this collecction

	boolean isEmpty()
	- Returns true if this collection contains no elements

	Iterator <E> iterator()
	- Returns an itrator over the elements in this collection


Methods of List Interfacce
-------------------------
	void add(int index, E element)
	- insert the specified element at the specified position in this list (elements may shift)

	E set(int index, E element)
	- Replace the element at the specified position in the list with the specified element

	E get(int index)
	- Returns the element at the specified position in this list

	int indexOf(Object o)
	- Returns the index of the first occurrence of the specified element in this list, or -1 if 
		this list does not contain the element

	int lastIndexOf(Object o)
	- Returns the index of the last occurrence of the specified element in this list, or -1 if 
		this list does not contain the element

	E remove (int index)
	- Removes the element at the specified position in this list

	List<E> subList(int fromIndex, int toIndex)
	- Returns a view of the position of this list between the specified fromIndex, inclusive , 	
		and toIndex exclusive

-----
note: There is no concrete class which implements Collection interface directly
------

------------------------------
ArrayList
https://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html
------------------------------
- ArrayList is defined using dynamic arrays
- It is resizable (grow, shrink)
- duplicates are allowed
- order of element are preserved
- Null insertion is possible
- Hetrogeneous objects are allowed

- Except TreeSet and TreeMap Hetrogeneous objects are allowed

-----
ArrayList constructor
---------------------
	ArrayList al = new ArrayList();

	- Creates an empty ArrayList object with default initial capacity "10" if ArrayList
		reaches its max capacity then a new ArrayList object will be created with 
		New capacity = (current capacity*3/2)+1

	ArrayList al = new ArrayList(int initialcapacity);
	- creates an empty ArrayList object with the specified initial capacity

	ArrayList al = new ArrayList(collection c);
	- creates an equivalent ArrayList object for the given collection

------------------
LinkedList and  ArrayList
------------------
- In ArrayList elements are stored in consecutive memory allocation
- In ArrayList, Insertion in the middle requires massive shift, which reduce the performance
- In LinkedList elements are not necessasry to be stored in contineous memory locations
- In LinkedList, Cost of inserting an element in the middle is lesser as no shift is required
- Accesing nth element in LinkedList is costly
- Accessing elements in ArrayList take constant time

----------
Method of LinkedList

https://docs.oracle.com/javase/7/docs/api/java/util/LinkedList.html

--------------------
	void addFirst(Object o)

	void addLast(Object o)

	Object getFirst()

	Object getLast()

	Object removeFirst()

	Object removeLast()


-------
contrcutor in LinkedList
-----------------
	LinkedList()

	LinkedList(Collection c)


-------------
Vector
https://docs.oracle.com/javase/8/docs/api/java/util/Vector.html
------------------
- Vector is implementation class of List interface
- Dynamic Array is used to implement Vector 
- Duplicates are allowed
- Insertion order is preserved
- Null insertion is allowed
- Heterogeneous are allowed
- Methods are synchronized so thread safe

ArrrayList VS Vector
--------------------
- ArrayList is not thread safe
- ArrayList methods are non synchronized
- ArrayList is high performance
- first introduce in : v1.2
- Vector is thread safe
- Vector method are synchronized
- Low performance
- first in : v1.0, modify in v1.2

--------------------
Stack
https://docs.oracle.com/javase/8/docs/api/java/util/Stack.html
----------------
- LIFO (last in first out) principle
- subclass of vector

----------
constructor of Stack
-------------------
- There is only one constrcutor, which creates an empty stack
	- Stack()



--------------
Set (interface)
--------------
 - Set (interface)  extends Collection (interface)
 - Set is child interface of Collection interface
 - Duplicates are not allowed
 - Insertion order is not preserved
 - Set interface does not have any new method
 
 - *LinkedHashSet class preserved insertion order

 -------
 HashSet
 https://docs.oracle.com/javase/7/docs/api/java/util/HashSet.html
 --------
 - HashSet (class) implements Set (interface)
 - Hash Table is the data structure
 - If you try to insert duplicate object, add method simple returns false, as 
 	duplicates are not allowed
 - Insetion order is not preserved but all objects are inserted based on hash code
 - Heterogeneous objeccts are allowed
 - Null values are allowed
 - Provide efficient searching
 
 ----------------------
 constrcutor in HashSet
 ----------------------
	HashSet()
	  	- default capacity 16
	  	- After 75% HashSet is filled, it grows dynamically
	  		- Thus fill ratio or load factor is 0.75

	HashSet(int capacity)
		- Load factor is 0.75

	HashSet(int capacity, float loadFactor)

	HashSet(Collection c)

-----------------
LinkedHashSet
https://docs.oracle.com/javase/7/docs/api/java/util/LinkedHashSet.html
---------------
	- Child class of HashSet
	- Insetion order preserved unlike hashset
	- Hash Table and Doubly Linked list both are used (hybrid data strcuture)

	----
	constructor
	------------
		LinkedHashSet()
			- Default initial capacity is 16
			- Load factor .75

		LinkedHashSet(int capacity)

		LinkedHashSet(int capacity, float loadfactor)

		LinkedHashSet(Collection c)



-----------
Sorted Set (Interface)
https://docs.oracle.com/javase/7/docs/api/java/util/SortedSet.html
------------------------------------------------------------------
	- SortedSet is a child interface of Set interface
	- Duplicates are not allowed
	- Elements are in sorted order
	- Sorted interface introduce 6 new methods
	- diff b/e Set & SortedSet
		- In Set, order is not important
		- In SortedSet, order is important  (some logical order)

	------------------
	SortedSet methods
	-------------------
		first()
		 	- returns the first element of the set
 		last()
 			- returns the last element of the set
 		headSet(E toElement)
 			- returns a view of the portion of this set whose elements are strcitly
 				less than toElement
 		tailSet(E fromElement)
 			-  returns a view of the portion of this set whose elements are greater 
 				than or equal to fromElement
 		subSet(E fromElemnt, E toElement)
 			- returns a view of the portion of this set whose elements range from 
 				fromElement, inclusive to toElment, exclusive
 		comparator()
 			- returns the comarator used to order the elements in this set, or null 
 				if this set uses the netural ordering of its elements
 	
 	Natural Order
 	-------------
 		For Numbers: Ascending order
 		For Strings: Dictionary order


--------------
NavigableSet (interface)
https://docs.oracle.com/javase/7/docs/api/java/util/NavigableSet.html
---------------
	- Child interface of Sortedset (interface)
	- provides methods for navigation in sorted list of elements

	--------------------
	NavigableSet Methods
	--------------------
		ceiling(E e)
			- returns the least element in this set greater than or equal to the given element,
				or null if there is no such element
		floor(E e)
			- returns the greatest element in this set less than or equal to the given element, 
				or null if there is no such element
		higher(E e)
			- returns the least element in this set strictly greater than the given element,
				or null if there is no such element
		lower(E e)
			- returns the greatest element in this set strictly less than the given element, 
				or null if there is no such element
		pollFirst()
			- retrives and removes the first(lowest) element, or returns null if set is empty
		pollLast()
			- retrives and removes the last(highest) element, or returns null if this set is 
				empty



---------------------
TreeSet (class)
https://docs.oracle.com/javase/8/docs/api/?java/util/TreeSet.html
---------------------
- TreeSet (class) is implementation  class  of NavigableSet (interface)
- Duplicates are not allowed
- Store elements in some logical order (sorted)
- Heterogeneous objects are not allowed
	- When tried ClassException generated
- Null values are acceptable for empty TreeSet, for Non empty TreeSet Null is not acceptable

--------------------
TreeSet Constructors
--------------------
	TreeSet()
		- constructs a new empty tree set, sorted according to the natural ordering of its  
			elements
	TreeSet(Comparator c)
		- constructs a new empty tree set, sorted according to the specified comparator
	TreeSet(Collection c)
		- constructs a new tree set containing the elements in the specified collection, sorted 
			according to the natural ordering of its elements
	TreeSet(SortedSet s)
		- constructs a new tree set containing the same elements and using the same ordering as
		 	the specified sorted set


-----------------
Default natural order
----------------------
	- Default natural sorting order work for
		- Homogeneous objects
		- Comparable objects 
	- StringBuffer objects are non comparable (its comparable in java 11)
	- String,Integer class implements comparable

-----
Comparble (interface)
-------------------
	- comparable interface belongs to java.lang package
		interface Comparable{
			int compareTo(Object obj);
		}

-------------
compareTo()
-----------
	- o1.compareTo(o2)
	- returns negative value if o1 < o2
	- returns positive value if o1 > o2
	- returns zero if o1 == o2


----------
Comparator (interface)
----------
	- Comparable is used for default natural sorting order
	- Comparator is used for custom sorting order
	- Comparator interface resides in java.util package

	interface Comparator {
		int compare(Object ob1, Object ob2);
		equals();
	}
	---------
	methods
	------------
	int compare(Object ob1, Object ob2);
		- returns negative value if ob1 < ob2
		- returns positive value if ob1 > ob2
		- returns zero if ob1 == ob2

	boolean equals()
		- dummy method (implementation is optional)